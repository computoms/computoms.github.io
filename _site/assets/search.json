

[
  
  
    
    
      {
        "title": "Data storage",
        "excerpt": "Data structures, algorithms\n\n\n\nThis article is hosted on computoms.com\n\nWhen speaking about algorithms, “data structures” is almost always the expression that comes along. Data structures and algorithms go in pair. An algorithm is fundamentally the manipulation of data from one form to another. The way we store this data is usually one of the important aspects to look at when designing an algorithm and looking at its performance.\n\n\n  \n  Parallel between data structures / algorithms and memory / processor\n\n\nChoosing the right data structure for your algorithm or program usually involves thinking about how to efficiently store and retrieve the data associated to your problem.\n\nTo correctly understand how the different data structures work, it is then important to know how we store data in a computer.\n\nComputer memory\n\nBasically, there are three “data storage” types in a computer:\n\n\n  Hard drive storage\n  Random-access memory\n  Processor cache memory\n\n\nHard drive\n\nHard drives are non-volatile data storage. This means that data remains unchanged when power is turned off. It is usually the cheapest and biggest memory in a computer, and is where you typically save your files, photos and other data you want to keep. One of the disadvantage of this type of memory is that it is usually slow (mostly due to hardware implementation as we’ll see in a futur post).\n\nRandom-access memory\n\nRandom-access memory (RAM) is where the non-persistent data is stored on your computer. It is a volatile data storage. When starting a program, the operating system loads the content of the program into the RAM memory and the program’s data is stored within the RAM memory.\n\nThe RAM memory is relatively fast to access, as we’ll see below, but looses its data when power is turned off. As we’ll see in futur posts on the hardware implementation of RAM memory, it needs a certain amount of power to be refreshed and to avoid loosing its data.\n\nThis is the memory type we’ll be interested when talking about data structures. Its most common hardware implementation is interesting to study as it allows to have a clearer insight into how data structures actually work and why some are better than others for solving particular problems.\n\nProcessor cache memory\n\nIn order to have an even faster memory, processors implements a part of memory directly onto their chips, called the cache memory. Its hardware implementation and location (closer to logic area of the processor) makes it the fastest storage accessible from the processor. This memory is also a type of random-access memory, and shares its drawback (loss of data when power turns off).\n\nBefore data is loaded into processor registers from the RAM memory, it is actually transferred from RAM to cache memory. Knowing this is important to understand the performance of data structures and some algorithms.\n\nSummary\n\nHere is a summary of the characteristics of each computer memory.\n\n\n  \n    \n       \n      Data access\n      Persistence\n    \n  \n  \n    \n      Hard drive\n      Slowest\n      Persistent\n    \n    \n      RAM\n      Fast\n      Non-persistent\n    \n    \n      Processor cache\n      Fastest\n      Non-persistent\n    \n  \n\n\n\nNext posts will present an overview of the standard hardware implementations of these memories in order to have a better understanding of how they work and how they can be used.\n",
        "content": "Data structures, algorithms\n\n\n\nThis article is hosted on computoms.com\n\nWhen speaking about algorithms, “data structures” is almost always the expression that comes along. Data structures and algorithms go in pair. An algorithm is fundamentally the manipulation of data from one form to another. The way we store this data is usually one of the important aspects to look at when designing an algorithm and looking at its performance.\n\n\n  \n  Parallel between data structures / algorithms and memory / processor\n\n\nChoosing the right data structure for your algorithm or program usually involves thinking about how to efficiently store and retrieve the data associated to your problem.\n\nTo correctly understand how the different data structures work, it is then important to know how we store data in a computer.\n\nComputer memory\n\nBasically, there are three “data storage” types in a computer:\n\n\n  Hard drive storage\n  Random-access memory\n  Processor cache memory\n\n\nHard drive\n\nHard drives are non-volatile data storage. This means that data remains unchanged when power is turned off. It is usually the cheapest and biggest memory in a computer, and is where you typically save your files, photos and other data you want to keep. One of the disadvantage of this type of memory is that it is usually slow (mostly due to hardware implementation as we’ll see in a futur post).\n\nRandom-access memory\n\nRandom-access memory (RAM) is where the non-persistent data is stored on your computer. It is a volatile data storage. When starting a program, the operating system loads the content of the program into the RAM memory and the program’s data is stored within the RAM memory.\n\nThe RAM memory is relatively fast to access, as we’ll see below, but looses its data when power is turned off. As we’ll see in futur posts on the hardware implementation of RAM memory, it needs a certain amount of power to be refreshed and to avoid loosing its data.\n\nThis is the memory type we’ll be interested when talking about data structures. Its most common hardware implementation is interesting to study as it allows to have a clearer insight into how data structures actually work and why some are better than others for solving particular problems.\n\nProcessor cache memory\n\nIn order to have an even faster memory, processors implements a part of memory directly onto their chips, called the cache memory. Its hardware implementation and location (closer to logic area of the processor) makes it the fastest storage accessible from the processor. This memory is also a type of random-access memory, and shares its drawback (loss of data when power turns off).\n\nBefore data is loaded into processor registers from the RAM memory, it is actually transferred from RAM to cache memory. Knowing this is important to understand the performance of data structures and some algorithms.\n\nSummary\n\nHere is a summary of the characteristics of each computer memory.\n\n\n  \n    \n       \n      Data access\n      Persistence\n    \n  \n  \n    \n      Hard drive\n      Slowest\n      Persistent\n    \n    \n      RAM\n      Fast\n      Non-persistent\n    \n    \n      Processor cache\n      Fastest\n      Non-persistent\n    \n  \n\n\n\nNext posts will present an overview of the standard hardware implementations of these memories in order to have a better understanding of how they work and how they can be used.\n",
        "url": "/storage/2019/03/31/Data-storage/"
      },
    
      {
        "title": "The physical principles behind data storage",
        "excerpt": "\n\nThe physical principles behind data storage\n\n\n\nElectromagnetism\n\nAs we know, matter is composed of molecules that are in turn composed of atoms – electrons gravitating around a small dense nucleus of protons and neutrons. These tiny particles have different intrinsic physical properties, such as a mass, an electric charge and a spin. These properties are very interesting to store and process information.\n\nWeight &amp; the gravitational force\n\nLet’s start by using the mass property of matter to show some physical interactions, that are very similar to the ones we actually use to store data in our computers.\n\nIf you hold an apple with your hand and suddenly drop it, it will fall on the floor. This is due to its weight. Its “weight” is actually the force applied on it by the Earth’s mass. Two masses attract each other by a force that is proportional to their distance and to their masses:\n\n\n\n(where  if the force between the two masses,  is a constant,  and  are the masses and  is the distance between the masses).\n\nElectric charge\n\nNow onto the electric charge. The electric charge of an electron is negative and measured in Coulomb (about  C which we’ll write ) whereas the one of a proton is positive () and the one of a neutron is null. Two electric charges of the same sign (for example, two electrons) repel each other while two electric charges of the opposite sign attract each other.\n\n\n  Show force formula\n\n\nIn conductive materials, such as most metals, electrons can freely move and hop from one atom to the other where there is some space available while atomic nucleus are fixed. Using the electric attraction/repulsion forces (see below), we can force electrons to move through a conductive material. This creates a current (= moving eletric charges). We can also force them to move to a piece of metal, and then isolate this piece of metal (preventing the electrons to go out of the piece of metal). This creates a charged metal piece.\n\nMoving electrons\n\nNow, how do we actually force electrons to move inside a metal?\n\n——————- Skip? ——————\n\n(To understand this, we need to understand the relationship between the electric field and the magnetic field. )\n\nDescription of a field (not really necessary?)\n\nBut what is a field? Tricky question.\n\n\n  A field is a “quantity” that has a value in each point of the space.\n\n\nFor example, you can define the “wind field” as being the intensity of the wind on each point of the Earth’s surface.\n\nFields have been invented by physicists to describe more easily the interations of matter, such as the attraction between two masses.\n\nIn a similar manner as we defined the gravitational field, we can also define the electric field. The electric field is the value of the force that attracts a charge particle (like the electron) around another charged particle.\n\nSide note\n\nWe can think of the two following terms as follows:\n\n\n  Electicity: using the motion of electric charges to do something (i.e. produce light, heat, mechanical motion) or move charges.\n\n\n\n  Electronics: using the electric charges to process or store data.\n\n\n\n  Spintronics: electronics using the spin of electrons\n\n\n——————- Skip? ——————\n\n\n  Explain magnetism and magnetic fields, generated by moving charges\n\n\n\n  Explain how to move electrons using a generator\n\n\nAbstractions\n=&gt; Use abstraction to speak about generator and stored charge.\n\nStoring charges\n\nA capacitor is a small electronic component which is composed of two metal sheets that are separated by an isolating material.\n\nThis component can be used to store an electric charge. Let’s imagine we use lots of these components in an array with possibility to choose which one we want to connect. This allows us to charge or discharge a particular capacitor.\n\nThe DRAM\n\nSpin &amp; Magnetism\n\n",
        "content": "\n\nThe physical principles behind data storage\n\n\n\nElectromagnetism\n\nAs we know, matter is composed of molecules that are in turn composed of atoms – electrons gravitating around a small dense nucleus of protons and neutrons. These tiny particles have different intrinsic physical properties, such as a mass, an electric charge and a spin. These properties are very interesting to store and process information.\n\nWeight &amp; the gravitational force\n\nLet’s start by using the mass property of matter to show some physical interactions, that are very similar to the ones we actually use to store data in our computers.\n\nIf you hold an apple with your hand and suddenly drop it, it will fall on the floor. This is due to its weight. Its “weight” is actually the force applied on it by the Earth’s mass. Two masses attract each other by a force that is proportional to their distance and to their masses:\n\n\n\n(where  if the force between the two masses,  is a constant,  and  are the masses and  is the distance between the masses).\n\nElectric charge\n\nNow onto the electric charge. The electric charge of an electron is negative and measured in Coulomb (about  C which we’ll write ) whereas the one of a proton is positive () and the one of a neutron is null. Two electric charges of the same sign (for example, two electrons) repel each other while two electric charges of the opposite sign attract each other.\n\n\n  Show force formula\n\n\nIn conductive materials, such as most metals, electrons can freely move and hop from one atom to the other where there is some space available while atomic nucleus are fixed. Using the electric attraction/repulsion forces (see below), we can force electrons to move through a conductive material. This creates a current (= moving eletric charges). We can also force them to move to a piece of metal, and then isolate this piece of metal (preventing the electrons to go out of the piece of metal). This creates a charged metal piece.\n\nMoving electrons\n\nNow, how do we actually force electrons to move inside a metal?\n\n——————- Skip? ——————\n\n(To understand this, we need to understand the relationship between the electric field and the magnetic field. )\n\nDescription of a field (not really necessary?)\n\nBut what is a field? Tricky question.\n\n\n  A field is a “quantity” that has a value in each point of the space.\n\n\nFor example, you can define the “wind field” as being the intensity of the wind on each point of the Earth’s surface.\n\nFields have been invented by physicists to describe more easily the interations of matter, such as the attraction between two masses.\n\nIn a similar manner as we defined the gravitational field, we can also define the electric field. The electric field is the value of the force that attracts a charge particle (like the electron) around another charged particle.\n\nSide note\n\nWe can think of the two following terms as follows:\n\n\n  Electicity: using the motion of electric charges to do something (i.e. produce light, heat, mechanical motion) or move charges.\n\n\n\n  Electronics: using the electric charges to process or store data.\n\n\n\n  Spintronics: electronics using the spin of electrons\n\n\n——————- Skip? ——————\n\n\n  Explain magnetism and magnetic fields, generated by moving charges\n\n\n\n  Explain how to move electrons using a generator\n\n\nAbstractions\n=&gt; Use abstraction to speak about generator and stored charge.\n\nStoring charges\n\nA capacitor is a small electronic component which is composed of two metal sheets that are separated by an isolating material.\n\nThis component can be used to store an electric charge. Let’s imagine we use lots of these components in an array with possibility to choose which one we want to connect. This allows us to charge or discharge a particular capacitor.\n\nThe DRAM\n\nSpin &amp; Magnetism\n\n",
        "url": "/physics/storage/2019/04/08/the-physical-principles-behind-data-storage-and-data-processing/"
      },
    
      {
        "title": "New Themes",
        "excerpt": "\n  Contast https://jekyllthemes.io/theme/contrast\n  Alembic https://jekyllthemes.io/theme/alembic\n\n",
        "content": "\n  Contast https://jekyllthemes.io/theme/contrast\n  Alembic https://jekyllthemes.io/theme/alembic\n\n",
        "url": "/2019/04/04/New-themes/"
      },
    
      {
        "title": "Elements",
        "excerpt": "A demo of Markdown and HTML includes\n",
        "content": "Heading 1\n\nHeading 2\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6\n\nA small element\n\nA link\n\nLorem ipsum dolor sit amet, consectetur adip* isicing elit, sed do eiusmod *tempor incididunt ut labore et dolore magna aliqua.\n\nDuis aute irure dolor in A link reprehenderit in voluptate velit esse cillum bold text dolore eu fugiat nulla pariatur. Excepteur span element sint occaecat cupidatat non proident, sunt italicised text in culpa qui officia deserunt mollit anim id some code est laborum.\n\n\n  An item\n  An item\n  An item\n  An item\n  An item\n\n\n\n  Item one\n  Item two\n  Item three\n  Item four\n  Item five\n\n\n\n  A simple blockquote\n\n\nSome HTML…\n\n&lt;blockquote cite=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;\n  &lt;p&gt;You planning a vacation, Mr. Sullivan?&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;a href=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;Sunways Security Guard&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/blockquote&gt;\n\n\n…CSS…\n\nblockquote {\n  text-align: center;\n  font-weight: bold;\n}\nblockquote footer {\n  font-size: .8rem;\n}\n\n\n…and JavaScript\n\nconst blockquote = document.querySelector(\"blockquote\")\nconst bolden = (keyString, string) =&gt;\n  string.replace(new RegExp(keyString, 'g'), '&lt;strong&gt;'+keyString+'&lt;/strong&gt;')\n\nblockquote.innerHTML = bolden(\"Mr. Sullivan\", blockquote.innerHTML)\n\n\nSingle line of code\n\nHTML Includes\n\nContact form\n\n\n  \n    Contact\n    Name: *\n    \n\n    Email Address: *\n    \n\n    Message: *\n    \n\n    \n    \n    * indicates a required field\n\n    \n      \n      \n      \n    \n  \n\n\n\n\nPlease enable JavaScript to use the form.\n\n{% include site-form.html %}\n\n\nDemo map embed\n\n\n\n{% include map.html id=\"XXXXXX\" title=\"Coffee shop map\" %}\n\n\nButton include\n\nA button\n\nA button with icon  twitter\n\n\n{% include button.html text=\"A button\" link=\"https://david.darn.es\" %}\n{% include button.html text=\"A button with icon\" link=\"https://twitter.com/daviddarnes\" icon=\"twitter\" %}\n\n\nIcon include\n\ntwitter\ntwitter\n\n\n{% include icon.html id=\"twitter\" title=\"twitter\" %}\n[{% include icon.html id=\"linkedin\" title=\"twitter\" %}](https://www.linkedin.com/in/daviddarnes)\n\n\nVideo include\n\n\n  \n\n\n{% include video.html id=\"zrkcGL5H3MU\" title=\"Siteleaf tutorial video\" %}\n\n\nImage includes\n\n\n  \n  Image with caption\n\n\n\n  \n  Right aligned image\n\n\n\n  \n  Left aligned image\n\n\n\n  \n  \n\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Image with caption\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Right aligned image\" position=\"right\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Left aligned image\" position=\"left\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/1600/800?image=894\" alt=\"Image with just alt text\" %}\n\n",
        "url": "/2019/03/18/elements/"
      },
    
  
  
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

